#
# This exceedingly simple test
# is designed to ensure that the velocitypenaltydrag
# input option functions and converges
#
# at a later date, adding a channel flow drag estimate would also
# be useful
# 
# for the above, one need only equate shear stresses at the wall
# to the pressure gradient, al la munson pg. 421 + 431
#
#
# this test was created from: penalty_poiseuille.in
#

# Mesh related options
[Mesh]
   class = 'serial'

   [./Generation]
      dimension = '2'
      element_type = 'QUAD9'
      n_elems_x = '50'
      n_elems_y = '20'
      x_max = '50.0'
      y_max = '10.0'
[]

# Options for tiem solvers



#Linear and nonlinear solver options
[linear-nonlinear-solver]
max_nonlinear_iterations = 10
max_linear_iterations = 2500

initial_linear_tolerance = 1.0e-12
minimum_linear_tolerance = 1.0e-12

relative_residual_tolerance = 1.0e-10
relative_step_tolerance     = 1.0e-10

# Currently broken when correction term is in place
#use_numerical_jacobians_only = 'true'

# quadratic scaling term gives discontinuous second derivatives and
# kills our numerical jacobian convergence
verify_analytic_jacobians = 1.e-4
numerical_jacobian_h = 1.e-10

# Visualization options
[vis-options]
output_vis = false
vis_output_file_prefix = convection_cell
output_format = 'xdr'

# Options for print info to the screen
[screen-options]
print_equation_system_info = 'true'
print_mesh_info = 'true'
print_log_info = 'true'
solver_verbose = 'true'
solver_quiet = 'false'

echo_physics = 'true'

[Materials]
  [./TestMaterial]
    [./Viscosity]
      model = 'constant'
      value = '1.0'
    [../Density]
         value = '1.0'
[]

[Physics]

   enabled_physics = 'IncompressibleNavierStokes VelocityPenalty VelocityDrag'

   [./IncompressibleNavierStokes]

      material = 'TestMaterial'

      pin_pressure = true
      pin_value = 100.0
      pin_location = '2.5 0' # Must be on boundary!

      ic_ids = '0'
      ic_types = 'parsed'
      ic_variables = 'u'
      ic_values = '1.0'

   [../VelocityPenalty]

      penalty_function = '{(1>y)|(y>9)*1e-2}{0}{0}'
      output_vars = 'velocity_penalty'

   [../VelocityDrag]

      coefficient = '1e-2'

[]

[BoundaryConditions]
   bc_ids = '1:3 0:2'
   bc_id_name_map = 'Flowing Walls'

   [./Flowing]
      [./Velocity]
         type = 'parsed_dirichlet'
	 u = '10*(1<y)*(y<9)*(y<9)'
      [../]
   [../]

   [./Walls]
      [./Velocity]
         type = 'no_slip'
      [../]
   [../]

   
[]

[Variables]
   [./Velocity]
      names = 'u v'
      fe_family = 'LAGRANGE'
      order = 'SECOND'
   [../Pressure]
      names = 'p'
      fe_family = 'LAGRANGE'
      order = 'FIRST'
[]

#
# nick 
# 7/29/16
#